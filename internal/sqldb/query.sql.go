// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqldb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanExpiredSessions = `-- name: CleanExpiredSessions :exec
DELETE FROM sessions WHERE expires_at <= NOW()
`

func (q *Queries) CleanExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanExpiredSessions)
	return err
}

const createMonster = `-- name: CreateMonster :one
INSERT INTO monsters (
    name, level, hp, armor, size, speed, fly, swim, actions, abilities, user_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

type CreateMonsterParams struct {
	Name      string
	Level     string
	Hp        int32
	Armor     NullArmorType
	Size      NullSizeType
	Speed     pgtype.Int4
	Fly       pgtype.Int4
	Swim      pgtype.Int4
	Actions   [][]byte
	Abilities [][]byte
	UserID    pgtype.UUID
}

func (q *Queries) CreateMonster(ctx context.Context, arg CreateMonsterParams) (Monster, error) {
	row := q.db.QueryRow(ctx, createMonster,
		arg.Name,
		arg.Level,
		arg.Hp,
		arg.Armor,
		arg.Size,
		arg.Speed,
		arg.Fly,
		arg.Swim,
		arg.Actions,
		arg.Abilities,
		arg.UserID,
	)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, discord_id, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, discord_id, expires_at
`

type CreateSessionParams struct {
	UserID    pgtype.UUID
	DiscordID string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.DiscordID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiscordID,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteMonster = `-- name: DeleteMonster :one
DELETE FROM monsters WHERE id = $1 RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

func (q *Queries) DeleteMonster(ctx context.Context, id pgtype.UUID) (Monster, error) {
	row := q.db.QueryRow(ctx, deleteMonster, id)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getMonster = `-- name: GetMonster :one
SELECT id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at from monsters WHERE id = $1
`

func (q *Queries) GetMonster(ctx context.Context, id pgtype.UUID) (Monster, error) {
	row := q.db.QueryRow(ctx, getMonster, id)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, discord_id, expires_at FROM sessions WHERE id = $1 AND expires_at > NOW()
`

func (q *Queries) GetSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiscordID,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByDiscordID = `-- name: GetUserByDiscordID :one
SELECT id, discord_id, username, avatar FROM users WHERE discord_id = $1
`

func (q *Queries) GetUserByDiscordID(ctx context.Context, discordID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByDiscordID, discordID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Avatar,
	)
	return i, err
}

const listAllMonsters = `-- name: ListAllMonsters :many
SELECT id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at from monsters
`

func (q *Queries) ListAllMonsters(ctx context.Context) ([]Monster, error) {
	rows, err := q.db.Query(ctx, listAllMonsters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Level,
			&i.Hp,
			&i.Armor,
			&i.Size,
			&i.Speed,
			&i.Fly,
			&i.Swim,
			&i.Actions,
			&i.Abilities,
			&i.Legendary,
			&i.Bloodied,
			&i.LastStand,
			&i.Saves,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMonstersByUserID = `-- name: ListMonstersByUserID :many
SELECT id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at from monsters WHERE user_id = $1 ORDER BY name ASC
`

func (q *Queries) ListMonstersByUserID(ctx context.Context, userID pgtype.UUID) ([]Monster, error) {
	rows, err := q.db.Query(ctx, listMonstersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Level,
			&i.Hp,
			&i.Armor,
			&i.Size,
			&i.Speed,
			&i.Fly,
			&i.Swim,
			&i.Actions,
			&i.Abilities,
			&i.Legendary,
			&i.Bloodied,
			&i.LastStand,
			&i.Saves,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMonster = `-- name: UpdateMonster :one
UPDATE monsters
SET name = $2,
   level = $3,
   hp = $4,
   armor = $5,
   size = $6,
   speed = $7,
   fly = $8,
   swim = $9,
   actions = $10,
   abilities = $11,
   user_id = $12
WHERE id = $1 RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

type UpdateMonsterParams struct {
	ID        pgtype.UUID
	Name      string
	Level     string
	Hp        int32
	Armor     NullArmorType
	Size      NullSizeType
	Speed     pgtype.Int4
	Fly       pgtype.Int4
	Swim      pgtype.Int4
	Actions   [][]byte
	Abilities [][]byte
	UserID    pgtype.UUID
}

func (q *Queries) UpdateMonster(ctx context.Context, arg UpdateMonsterParams) (Monster, error) {
	row := q.db.QueryRow(ctx, updateMonster,
		arg.ID,
		arg.Name,
		arg.Level,
		arg.Hp,
		arg.Armor,
		arg.Size,
		arg.Speed,
		arg.Fly,
		arg.Swim,
		arg.Actions,
		arg.Abilities,
		arg.UserID,
	)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (discord_id, username, avatar)
VALUES ($1, $2, $3)
ON CONFLICT (discord_id)
DO UPDATE SET
    username = $2,
    avatar = $3
RETURNING id, discord_id, username, avatar
`

type UpsertUserParams struct {
	DiscordID string
	Username  string
	Avatar    pgtype.Text
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.DiscordID, arg.Username, arg.Avatar)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Avatar,
	)
	return i, err
}
