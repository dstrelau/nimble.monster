// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqldb

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMonsterToCollection = `-- name: AddMonsterToCollection :exec
INSERT INTO monsters_collections (monster_id, collection_id) VALUES ($1, $2)
`

func (q *Queries) AddMonsterToCollection(ctx context.Context, monsterID uuid.UUID, collectionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, addMonsterToCollection, monsterID, collectionID)
	return err
}

const cleanExpiredSessions = `-- name: CleanExpiredSessions :exec
DELETE FROM sessions WHERE expires_at <= NOW()
`

func (q *Queries) CleanExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanExpiredSessions)
	return err
}

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (
    name, public, user_id
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, name, public, created_at, updated_at
`

type CreateCollectionParams struct {
	Name   string
	Public pgtype.Bool
	UserID uuid.UUID
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection, arg.Name, arg.Public, arg.UserID)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createMonster = `-- name: CreateMonster :one
INSERT INTO monsters (
    user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

type CreateMonsterParams struct {
	UserID    uuid.UUID
	Name      string
	Level     string
	Hp        int32
	Armor     ArmorType
	Size      SizeType
	Speed     int32
	Fly       int32
	Swim      int32
	Actions   [][]byte
	Abilities [][]byte
}

func (q *Queries) CreateMonster(ctx context.Context, arg CreateMonsterParams) (Monster, error) {
	row := q.db.QueryRow(ctx, createMonster,
		arg.UserID,
		arg.Name,
		arg.Level,
		arg.Hp,
		arg.Armor,
		arg.Size,
		arg.Speed,
		arg.Fly,
		arg.Swim,
		arg.Actions,
		arg.Abilities,
	)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, discord_id, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, discord_id, expires_at
`

type CreateSessionParams struct {
	UserID    uuid.UUID
	DiscordID string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.DiscordID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiscordID,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteCollection = `-- name: DeleteCollection :one
DELETE FROM collections WHERE user_id = $1 AND id = $2 RETURNING id, user_id, name, public, created_at, updated_at
`

func (q *Queries) DeleteCollection(ctx context.Context, userID uuid.UUID, iD uuid.UUID) (Collection, error) {
	row := q.db.QueryRow(ctx, deleteCollection, userID, iD)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMonster = `-- name: DeleteMonster :one
DELETE FROM monsters WHERE user_id = $1 AND id = $2 RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

func (q *Queries) DeleteMonster(ctx context.Context, userID uuid.UUID, iD uuid.UUID) (Monster, error) {
	row := q.db.QueryRow(ctx, deleteMonster, userID, iD)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT id, user_id, name, public, created_at, updated_at FROM collections WHERE id = $1
`

func (q *Queries) GetCollection(ctx context.Context, id uuid.UUID) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMonster = `-- name: GetMonster :one
SELECT id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at FROM monsters WHERE user_id = $1 AND id = $2
`

func (q *Queries) GetMonster(ctx context.Context, userID uuid.UUID, iD uuid.UUID) (Monster, error) {
	row := q.db.QueryRow(ctx, getMonster, userID, iD)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, discord_id, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiscordID,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByUnexpiredSession = `-- name: GetUserByUnexpiredSession :one
SELECT users.id, users.discord_id, users.username, users.avatar FROM users
JOIN sessions ON users.id = sessions.user_id
WHERE sessions.id = $1 AND sessions.expires_at >= NOW()
`

func (q *Queries) GetUserByUnexpiredSession(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUnexpiredSession, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Avatar,
	)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT c.id, c.user_id, c.name, c.public, c.created_at, c.updated_at, COUNT(mc.monster_id) as monster_count
FROM collections c
LEFT JOIN monsters_collections mc ON c.id = mc.collection_id
WHERE c.user_id = $1
GROUP BY c.id
ORDER BY c.name ASC
`

type ListCollectionsRow struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Name         string
	Public       pgtype.Bool
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	MonsterCount int64
}

func (q *Queries) ListCollections(ctx context.Context, userID uuid.UUID) ([]ListCollectionsRow, error) {
	rows, err := q.db.Query(ctx, listCollections, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCollectionsRow
	for rows.Next() {
		var i ListCollectionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Public,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MonsterCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMonsters = `-- name: ListMonsters :many
SELECT id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at from monsters WHERE user_id = $1 ORDER BY name ASC
`

func (q *Queries) ListMonsters(ctx context.Context, userID uuid.UUID) ([]Monster, error) {
	rows, err := q.db.Query(ctx, listMonsters, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Level,
			&i.Hp,
			&i.Armor,
			&i.Size,
			&i.Speed,
			&i.Fly,
			&i.Swim,
			&i.Actions,
			&i.Abilities,
			&i.Legendary,
			&i.Bloodied,
			&i.LastStand,
			&i.Saves,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMonstersInCollection = `-- name: ListMonstersInCollection :many
SELECT monsters.id, monsters.user_id, monsters.name, monsters.level, monsters.hp, monsters.armor, monsters.size, monsters.speed, monsters.fly, monsters.swim, monsters.actions, monsters.abilities, monsters.legendary, monsters.bloodied, monsters.last_stand, monsters.saves, monsters.created_at, monsters.updated_at FROM monsters
JOIN monsters_collections ON monsters.id = monsters_collections.monster_id
WHERE collection_id = $1
`

func (q *Queries) ListMonstersInCollection(ctx context.Context, collectionID uuid.UUID) ([]Monster, error) {
	rows, err := q.db.Query(ctx, listMonstersInCollection, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Level,
			&i.Hp,
			&i.Armor,
			&i.Size,
			&i.Speed,
			&i.Fly,
			&i.Swim,
			&i.Actions,
			&i.Abilities,
			&i.Legendary,
			&i.Bloodied,
			&i.LastStand,
			&i.Saves,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMonsterFromCollection = `-- name: RemoveMonsterFromCollection :exec
DELETE FROM monsters_collections WHERE monster_id = $1 AND collection_id = $2
`

func (q *Queries) RemoveMonsterFromCollection(ctx context.Context, monsterID uuid.UUID, collectionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeMonsterFromCollection, monsterID, collectionID)
	return err
}

const searchMonsters = `-- name: SearchMonsters :many
SELECT m.id, m.user_id, m.name, m.level, m.hp, m.armor, m.size, m.speed, m.fly, m.swim, m.actions, m.abilities, m.legendary, m.bloodied, m.last_stand, m.saves, m.created_at, m.updated_at
FROM monsters m
WHERE
    similarity(lower(m.name), lower($1)) > 0.3
    OR lower(m.name) LIKE lower('%' || $1 || '%')
ORDER BY
    similarity(lower(m.name), lower($1)) DESC,
    m.name ASC
LIMIT 10
`

func (q *Queries) SearchMonsters(ctx context.Context, lower string) ([]Monster, error) {
	rows, err := q.db.Query(ctx, searchMonsters, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monster
	for rows.Next() {
		var i Monster
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Level,
			&i.Hp,
			&i.Armor,
			&i.Size,
			&i.Speed,
			&i.Fly,
			&i.Swim,
			&i.Actions,
			&i.Abilities,
			&i.Legendary,
			&i.Bloodied,
			&i.LastStand,
			&i.Saves,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :one
UPDATE collections
SET name = $3,
    public = $4
WHERE user_id = $1 AND id = $2
RETURNING id, user_id, name, public, created_at, updated_at
`

type UpdateCollectionParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
	Name   string
	Public pgtype.Bool
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, updateCollection,
		arg.UserID,
		arg.ID,
		arg.Name,
		arg.Public,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Public,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMonster = `-- name: UpdateMonster :one
UPDATE monsters
SET name = $3,
   level = $4,
   hp = $5,
   armor = $6,
   size = $7,
   speed = $8,
   fly = $9,
   swim = $10,
   actions = $11,
   abilities = $12,
   user_id = $13
WHERE user_id = $1 AND id = $2 RETURNING id, user_id, name, level, hp, armor, size, speed, fly, swim, actions, abilities, legendary, bloodied, last_stand, saves, created_at, updated_at
`

type UpdateMonsterParams struct {
	UserID    uuid.UUID
	ID        uuid.UUID
	Name      string
	Level     string
	Hp        int32
	Armor     ArmorType
	Size      SizeType
	Speed     int32
	Fly       int32
	Swim      int32
	Actions   [][]byte
	Abilities [][]byte
	UserID_2  uuid.UUID
}

func (q *Queries) UpdateMonster(ctx context.Context, arg UpdateMonsterParams) (Monster, error) {
	row := q.db.QueryRow(ctx, updateMonster,
		arg.UserID,
		arg.ID,
		arg.Name,
		arg.Level,
		arg.Hp,
		arg.Armor,
		arg.Size,
		arg.Speed,
		arg.Fly,
		arg.Swim,
		arg.Actions,
		arg.Abilities,
		arg.UserID_2,
	)
	var i Monster
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Level,
		&i.Hp,
		&i.Armor,
		&i.Size,
		&i.Speed,
		&i.Fly,
		&i.Swim,
		&i.Actions,
		&i.Abilities,
		&i.Legendary,
		&i.Bloodied,
		&i.LastStand,
		&i.Saves,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (discord_id, username, avatar)
VALUES ($1, $2, $3)
ON CONFLICT (discord_id)
DO UPDATE SET
    username = $2,
    avatar = $3
RETURNING id, discord_id, username, avatar
`

type UpsertUserParams struct {
	DiscordID string
	Username  string
	Avatar    pgtype.Text
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.DiscordID, arg.Username, arg.Avatar)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.Username,
		&i.Avatar,
	)
	return i, err
}
