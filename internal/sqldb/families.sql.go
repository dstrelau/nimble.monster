// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: families.sql

package sqldb

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countMonstersInFamily = `-- name: CountMonstersInFamily :one
SELECT COUNT(*) FROM monsters WHERE family_id = $1
`

func (q *Queries) CountMonstersInFamily(ctx context.Context, familyID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countMonstersInFamily, familyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFamily = `-- name: CreateFamily :one
INSERT INTO families (
  user_id,
  name,
  abilities,
  visibility
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, visibility, name, abilities, created_at, updated_at
`

type CreateFamilyParams struct {
	UserID     uuid.UUID
	Name       string
	Abilities  [][]byte
	Visibility FamilyVisibility
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRow(ctx, createFamily,
		arg.UserID,
		arg.Name,
		arg.Abilities,
		arg.Visibility,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Visibility,
		&i.Name,
		&i.Abilities,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFamily = `-- name: DeleteFamily :exec
DELETE FROM families
WHERE id = $1
`

func (q *Queries) DeleteFamily(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFamily, id)
	return err
}

const findFamilies = `-- name: FindFamilies :many
SELECT id, user_id, visibility, name, abilities, created_at, updated_at FROM families WHERE id = ANY($1::uuid[])
`

func (q *Queries) FindFamilies(ctx context.Context, dollar_1 []uuid.UUID) ([]Family, error) {
	rows, err := q.db.Query(ctx, findFamilies, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Family
	for rows.Next() {
		var i Family
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Visibility,
			&i.Name,
			&i.Abilities,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFamily = `-- name: GetFamily :one
SELECT f.id, f.user_id, f.visibility, f.name, f.abilities, f.created_at, f.updated_at, (
    SELECT COUNT(*) FROM monsters WHERE family_id = f.id
) as monster_count
FROM families f WHERE f.id = $1
`

type GetFamilyRow struct {
	Family       Family
	MonsterCount int64
}

func (q *Queries) GetFamily(ctx context.Context, id uuid.UUID) (GetFamilyRow, error) {
	row := q.db.QueryRow(ctx, getFamily, id)
	var i GetFamilyRow
	err := row.Scan(
		&i.Family.ID,
		&i.Family.UserID,
		&i.Family.Visibility,
		&i.Family.Name,
		&i.Family.Abilities,
		&i.Family.CreatedAt,
		&i.Family.UpdatedAt,
		&i.MonsterCount,
	)
	return i, err
}

const listFamiliesForUser = `-- name: ListFamiliesForUser :many
SELECT f.id, f.user_id, f.visibility, f.name, f.abilities, f.created_at, f.updated_at, (
    SELECT COUNT(*) FROM monsters WHERE family_id = f.id
) as monster_count
FROM families f
WHERE f.user_id = $1
ORDER BY name ASC
`

type ListFamiliesForUserRow struct {
	Family       Family
	MonsterCount int64
}

func (q *Queries) ListFamiliesForUser(ctx context.Context, userID uuid.UUID) ([]ListFamiliesForUserRow, error) {
	rows, err := q.db.Query(ctx, listFamiliesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFamiliesForUserRow
	for rows.Next() {
		var i ListFamiliesForUserRow
		if err := rows.Scan(
			&i.Family.ID,
			&i.Family.UserID,
			&i.Family.Visibility,
			&i.Family.Name,
			&i.Family.Abilities,
			&i.Family.CreatedAt,
			&i.Family.UpdatedAt,
			&i.MonsterCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicFamilies = `-- name: ListPublicFamilies :many
SELECT f.id, f.user_id, f.visibility, f.name, f.abilities, f.created_at, f.updated_at, (
    SELECT COUNT(*) FROM monsters WHERE family_id = f.id
) as monster_count
FROM families f
WHERE visibility = 'public'
ORDER BY name ASC
`

type ListPublicFamiliesRow struct {
	Family       Family
	MonsterCount int64
}

func (q *Queries) ListPublicFamilies(ctx context.Context) ([]ListPublicFamiliesRow, error) {
	rows, err := q.db.Query(ctx, listPublicFamilies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPublicFamiliesRow
	for rows.Next() {
		var i ListPublicFamiliesRow
		if err := rows.Scan(
			&i.Family.ID,
			&i.Family.UserID,
			&i.Family.Visibility,
			&i.Family.Name,
			&i.Family.Abilities,
			&i.Family.CreatedAt,
			&i.Family.UpdatedAt,
			&i.MonsterCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFamily = `-- name: UpdateFamily :one
UPDATE families
SET
  name = $2,
  abilities = $3,
  visibility = $4,
  updated_at = now()
WHERE id = $1
RETURNING id, user_id, visibility, name, abilities, created_at, updated_at
`

type UpdateFamilyParams struct {
	ID         uuid.UUID
	Name       string
	Abilities  [][]byte
	Visibility FamilyVisibility
}

func (q *Queries) UpdateFamily(ctx context.Context, arg UpdateFamilyParams) (Family, error) {
	row := q.db.QueryRow(ctx, updateFamily,
		arg.ID,
		arg.Name,
		arg.Abilities,
		arg.Visibility,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Visibility,
		&i.Name,
		&i.Abilities,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
