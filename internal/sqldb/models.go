// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqldb

import (
	"database/sql/driver"
	"fmt"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ArmorType string

const (
	ArmorTypeValue0 ArmorType = ""
	ArmorTypeMedium ArmorType = "medium"
	ArmorTypeHeavy  ArmorType = "heavy"
)

func (e *ArmorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ArmorType(s)
	case string:
		*e = ArmorType(s)
	default:
		return fmt.Errorf("unsupported scan type for ArmorType: %T", src)
	}
	return nil
}

type NullArmorType struct {
	ArmorType ArmorType
	Valid     bool // Valid is true if ArmorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullArmorType) Scan(value interface{}) error {
	if value == nil {
		ns.ArmorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ArmorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullArmorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ArmorType), nil
}

type CollectionVisibility string

const (
	CollectionVisibilityPublic  CollectionVisibility = "public"
	CollectionVisibilitySecret  CollectionVisibility = "secret"
	CollectionVisibilityPrivate CollectionVisibility = "private"
)

func (e *CollectionVisibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CollectionVisibility(s)
	case string:
		*e = CollectionVisibility(s)
	default:
		return fmt.Errorf("unsupported scan type for CollectionVisibility: %T", src)
	}
	return nil
}

type NullCollectionVisibility struct {
	CollectionVisibility CollectionVisibility
	Valid                bool // Valid is true if CollectionVisibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCollectionVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.CollectionVisibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CollectionVisibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCollectionVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CollectionVisibility), nil
}

type SizeType string

const (
	SizeTypeTiny       SizeType = "tiny"
	SizeTypeSmall      SizeType = "small"
	SizeTypeMedium     SizeType = "medium"
	SizeTypeLarge      SizeType = "large"
	SizeTypeHuge       SizeType = "huge"
	SizeTypeGargantuan SizeType = "gargantuan"
)

func (e *SizeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SizeType(s)
	case string:
		*e = SizeType(s)
	default:
		return fmt.Errorf("unsupported scan type for SizeType: %T", src)
	}
	return nil
}

type NullSizeType struct {
	SizeType SizeType
	Valid    bool // Valid is true if SizeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSizeType) Scan(value interface{}) error {
	if value == nil {
		ns.SizeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SizeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSizeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SizeType), nil
}

type Collection struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Public      pgtype.Bool
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Description string
	Visibility  CollectionVisibility
}

type Monster struct {
	ID        uuid.UUID
	Name      string
	Level     string
	Hp        int32
	Armor     ArmorType
	Size      SizeType
	Speed     int32
	Fly       int32
	Swim      int32
	Actions   [][]byte
	Abilities [][]byte
	Legendary bool
	Bloodied  string
	LastStand string
	Saves     []string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	UserID    uuid.UUID
	Kind      string
}

type MonstersCollection struct {
	MonsterID    uuid.UUID
	CollectionID uuid.UUID
}

type Session struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	DiscordID string
	ExpiresAt pgtype.Timestamptz
}

type User struct {
	ID           uuid.UUID
	DiscordID    string
	Username     string
	Avatar       pgtype.Text
	RefreshToken pgtype.Text
}
