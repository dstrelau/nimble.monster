package pages

import (
	"nimble.monster/internal/nimble"
	"nimble.monster/internal/web"
	"nimble.monster/web/assets/svg"
	"nimble.monster/web/components"
	"strconv"
)

type MonsterDisplay string

const (
	MonsterDisplayCard  MonsterDisplay = "card"
	MonsterDisplayTable MonsterDisplay = "table"
)

func (d MonsterDisplay) Valid() bool {
	switch d {
	case MonsterDisplayCard, MonsterDisplayTable:
		return true
	default:
		return false
	}
}

type MyMonstersProps struct {
	web.GlobalProps
	Display  MonsterDisplay
	Monsters []nimble.Monster
}

type ButtonGroupItem struct {
	ID    string
	URL   string
	Icon  templ.Component
	Label string
}

templ ButtonGroup(items []ButtonGroupItem, selected string) {
	<div class="flex rounded-md shadow-sm" role="group">
		for i, item := range items {
			{{
	classes := "inline-flex items-center px-4 py-2 text-sm font-medium bg-gray-200 border border-gray-200 focus:z-10 focus:ring-2 focus:ring-blue-700"
	if i == 0 {
		classes += " rounded-l-lg"
	} else if i == len(items)-1 {
		classes += " rounded-r-lg"
	}
	if item.ID == selected {
		classes += " bg-white"
	}
			}}
			<a
				class={ classes }
				href={ templ.URL(item.URL) }
				hx-get={ string(templ.URL(item.URL)) }
				hx-target="closest main"
				hx-swap="innerHTML"
				hx-push-url="true"
			>
				@item.Icon
				{ item.Label }
			</a>
		}
	</div>
}

templ editDeleteButtons(id, deleteTarget string) {
	<div class="flex flex-row justify-end mr-4">
		<a href={ templ.URL("/my/monsters/" + id + "/edit") } class="w-4 mx-4 p-2">
			@svg.Edit("w-5 h-5 text-slate-500")
		</a>
		<a
			href={ templ.URL("/my/monsters/" + id + "/delete") }
			class="w-4 p-2"
			hx-delete={ "/my/monsters/" + id }
			hx-confirm="Really? This is permanent."
			hx-target={ deleteTarget }
			hx-swap="outerHTML"
		>
			@svg.Trash("w-5 h-5 text-slate-500")
		</a>
	</div>
}

templ monsterCards(props MyMonstersProps) {
	<div class="grid grid-cols-6 gap-x-8">
		for _, m := range props.Monsters {
			<div class="monster col-span-2">
				@components.MonsterCard(m)
				@editDeleteButtons(m.ID, "closest div.monster")
			</div>
		}
	</div>
}

templ tableTH(s string, sortable bool) {
	<th scope="col" class="px-6 py-3">
		<div class="flex items-center">
			{ s }
			if false && sortable {
				// TODO
				@svg.Sort("w-3 h-3 ms-1.5")
			}
		</div>
	</th>
}

templ monsterTable(props MyMonstersProps) {
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					@tableTH("Name", false)
					@tableTH("Level", true)
					@tableTH("Size", true)
					@tableTH("HP", true)
					<th scope="col" class="px-6 py-3">
						<span class="sr-only">Edit / Delete</span>
					</th>
				</tr>
			</thead>
			<tbody>
				for _, m := range props.Monsters {
					<tr class="bg-white border-b">
						<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">{ m.Name } </th>
						<td class="px-6 py-4">{ m.Level }</td>
						<td class="px-6 py-4">{ m.Size.Display() }</td>
						<td class="px-6 py-4">{ strconv.Itoa(m.HP) }</td>
						<td class="px-6 py-4 text-right">
							@editDeleteButtons(m.ID, "closest tr")
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ MyMonsters(props MyMonstersProps) {
	<div class="grid justify-items-center mb-4">
		@ButtonGroup([]ButtonGroupItem{
			{
				ID:    "card",
				URL:   "?display=card",
				Icon:  svg.Squares("w-4 h-4 me-1 text-slate-800"),
				Label: "Cards",
			},
			{
				ID:    "table",
				URL:   "?display=table",
				Icon:  svg.Table("w-4 h-4 me-1 text-slate-800"),
				Label: "Table",
			},
		}, string(props.Display))
	</div>
	if props.Display == MonsterDisplayTable {
		@monsterTable(props)
	} else {
		@monsterCards(props)
	}
}
