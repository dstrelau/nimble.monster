generator client {
  provider        = "prisma-client-js"
  output          = "../lib/prisma"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id                      String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creatorId               String                     @map("user_id") @db.Uuid
  name                    String
  public                  Boolean?                   @default(false)
  createdAt               DateTime?                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?                  @default(now()) @map("updated_at") @db.Timestamptz(6)
  description             String                     @default("")
  visibility              collection_visibility      @default(public)
  creator                 User                       @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemCollections         ItemInCollection[]
  monsterCollections      MonsterInCollection[]
  spellSchoolCollections  SpellSchoolInCollection[]

  @@index([creatorId], map: "idx_collections_user_id")
  @@map("collections")
}

model MonsterInCollection {
  monsterId    String     @map("monster_id") @db.Uuid
  collectionId String     @map("collection_id") @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  monster      Monster    @relation(fields: [monsterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([monsterId, collectionId])
  @@map("monsters_collections")
}

model ItemInCollection {
  collectionId String     @map("collection_id") @db.Uuid
  itemId       String     @map("item_id") @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id])
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([itemId, collectionId])
  @@map("items_collections")
}

model SpellSchoolInCollection {
  collectionId  String      @map("collection_id") @db.Uuid
  spellSchoolId String      @map("spell_school_id") @db.Uuid
  collection    Collection  @relation(fields: [collectionId], references: [id])
  spellSchool   SpellSchool @relation(fields: [spellSchoolId], references: [id], onDelete: Cascade)

  @@id([spellSchoolId, collectionId])
  @@map("spell_schools_collections")
}

model Family {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creatorId       String            @map("user_id") @db.Uuid
  visibility      family_visibility @default(public)
  name            String
  abilities       Json[]
  createdAt       DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  description     String?
  featured        Boolean           @default(false)
  monsterFamilies MonsterFamily[]
  creator         User              @relation(fields: [creatorId], references: [id], onUpdate: NoAction)

  @@map("families")
}

model Condition {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  description       String
  official          Boolean            @default(false)
  creatorId         String             @map("creator_id") @db.Uuid
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime           @default(now()) @map("updated_at") @db.Timestamptz(6)
  creator           User               @relation(fields: [creatorId], references: [id], onUpdate: NoAction)
  monsterConditions MonsterCondition[]

  @@map("conditions")
}

model MonsterCondition {
  monsterId   String    @map("monster_id") @db.Uuid
  conditionId String    @map("condition_id") @db.Uuid
  inline      Boolean
  condition   Condition @relation(fields: [conditionId], references: [id])
  monster     Monster   @relation(fields: [monsterId], references: [id], onDelete: Cascade)

  @@id([monsterId, conditionId])
  @@map("monsters_conditions")
}

model MonsterFamily {
  monsterId String  @map("monster_id") @db.Uuid
  familyId  String  @map("family_id") @db.Uuid
  family    Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)
  monster   Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)

  @@id([monsterId, familyId])
  @@map("monsters_families")
}

model Monster {
  id                 String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String                @map("user_id") @db.Uuid
  sourceId           String?               @map("source_id") @db.Uuid
  remixedFromId      String?               @map("remixed_from_id") @db.Uuid
  name               String
  level              String
  hp                 Int
  armor              armor_type
  size               size_type             @default(medium)
  speed              Int                   @default(0)
  fly                Int                   @default(0)
  swim               Int                   @default(0)
  actions            Json[]
  abilities          Json[]
  legendary          Boolean?              @default(false)
  bloodied           String                @default("")
  lastStand          String                @default("") @map("last_stand")
  saves              String[]
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  kind               String                @default("")
  visibility         monster_visibility    @default(public)
  actionPreface      String?               @map("action_preface")
  moreInfo           String?               @default("") @map("more_info")
  burrow             Int                   @default(0)
  climb              Int                   @default(0)
  teleport           Int                   @default(0)
  minion             Boolean               @default(false)
  levelInt           Int                   @default(0) @map("level_int")
  role               monster_role?
  creator            User                  @relation("MonsterCreator", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  source             Source?               @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  remixedFrom        Monster?              @relation("MonsterRemix", fields: [remixedFromId], references: [id], onUpdate: NoAction)
  remixes            Monster[]             @relation("MonsterRemix")
  monsterCollections MonsterInCollection[]
  monsterConditions  MonsterCondition[]
  monsterFamilies    MonsterFamily[]
  monsterAwards      MonsterAward[]

  @@index([userId], map: "idx_monsters_user_id")
  @@map("monsters")
}

model Companion {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  kind            String               @default("")
  class           String               @default("")
  hp_per_level    String               @map("hp_per_level")
  wounds          Int                  @default(0)
  size            size_type            @default(medium)
  saves           String               @default("")
  actions         Json[]
  abilities       Json[]
  actionPreface   String?              @map("action_preface")
  dyingRule       String               @default("") @map("dying_rule")
  moreInfo        String?              @default("") @map("more_info")
  visibility      companion_visibility @default(public)
  userId          String               @map("user_id") @db.Uuid
  sourceId        String?              @map("source_id") @db.Uuid
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator         User                 @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source          Source?              @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  companionAwards CompanionAward[]

  @@index([userId], map: "idx_companions_user_id")
  @@map("companions")
}

model Session {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  discordId  String   @map("discord_id")
  expires_at DateTime @db.Timestamptz(6)
  users      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([expires_at], map: "idx_sessions_expires_at")
  @@map("sessions")
}

model Item {
  id              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  kind            String             @default("")
  description     String             @default("")
  moreInfo        String?            @default("") @map("more_info")
  visibility      item_visibility    @default(public)
  userId          String             @map("user_id") @db.Uuid
  sourceId        String?            @map("source_id") @db.Uuid
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  imageIcon       String?            @map("image_icon")
  rarity          item_rarity        @default(unspecified)
  imageBgIcon     String?            @map("image_bg_icon")
  imageColor      String?            @map("image_color")
  imageBgColor    String?            @map("image_bg_color")
  creator         User               @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source          Source?            @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  itemCollections ItemInCollection[]
  itemAwards      ItemAward[]

  @@index([userId], map: "idx_items_user_id")
  @@map("items")
}

model Subclass {
  id             String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  className      String              @map("class_name")
  namePreface    String?             @map("name_preface")
  description    String?
  visibility     subclass_visibility @default(public)
  userId         String              @map("user_id") @db.Uuid
  sourceId       String?             @map("source_id") @db.Uuid
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  tagline        String?
  abilities      SubclassAbility[]
  creator        User                @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source         Source?             @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  subclassAwards SubclassAward[]

  @@index([userId], map: "idx_subclasses_user_id")
  @@map("subclasses")
}

model SubclassAbility {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subclassId  String   @map("subclass_id") @db.Uuid
  level       Int
  name        String
  description String
  orderIndex  Int      @map("order_index")
  subclass    Subclass @relation(fields: [subclassId], references: [id], onDelete: Cascade)

  @@index([subclassId, level, orderIndex], map: "idx_subclass_abilities_subclass_level_order")
  @@map("subclass_abilities")
}

model SpellSchool {
  id                    String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String
  description           String?
  visibility            spell_school_visibility    @default(public)
  userId                String                     @map("user_id") @db.Uuid
  sourceId              String?                    @map("source_id") @db.Uuid
  createdAt             DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator               User                       @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source                Source?                    @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  spells                Spell[]
  schoolAwards          SpellSchoolAward[]
  spellSchoolCollections SpellSchoolInCollection[]

  @@index([userId], map: "idx_spell_schools_user_id")
  @@map("spell_schools")
}

model Spell {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  schoolId       String      @map("school_id") @db.Uuid
  name           String
  tier           Int         @default(0)
  actions        Int         @default(1)
  reaction       Boolean     @default(false)
  targetType     String?     @map("target_type")
  targetKind     String?     @map("target_kind")
  targetDistance Int?        @map("target_distance")
  damage         String?
  description    String?
  highLevels     String?     @map("high_levels")
  concentration  String?
  upcast         String?
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  school         SpellSchool @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId], map: "idx_spells_school_id")
  @@map("spells")
}

model Background {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  description      String
  requirement      String?
  userId           String            @map("user_id") @db.Uuid
  sourceId         String?           @map("source_id") @db.Uuid
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator          User              @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source           Source?           @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  backgroundAwards BackgroundAward[]

  @@index([userId], map: "idx_backgrounds_user_id")
  @@map("backgrounds")
}

model Ancestry {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  description    String
  size           size_type[]
  rarity         ancestry_rarity @default(common)
  abilities      Json[]
  userId         String          @map("user_id") @db.Uuid
  sourceId       String?         @map("source_id") @db.Uuid
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator        User            @relation(fields: [userId], references: [id], onUpdate: NoAction)
  source         Source?         @relation(fields: [sourceId], references: [id], onUpdate: NoAction)
  ancestryAwards AncestryAward[]

  @@index([userId], map: "idx_ancestries_user_id")
  @@map("ancestries")
}

model User {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  discordId    String        @unique @map("discord_id")
  username     String        @unique(map: "idx_users_username")
  avatar       String?
  refreshToken String?       @map("refresh_token")
  displayName  String?       @map("display_name")
  imageUrl     String?       @map("image_url")
  role         String?
  collections  Collection[]
  companions   Companion[]
  conditions   Condition[]
  items        Item[]
  monsters     Monster[]     @relation("MonsterCreator")
  sessions     Session[]
  subclasses   Subclass[]
  Family       Family[]
  spellSchools SpellSchool[]
  backgrounds  Background[]
  ancestries   Ancestry[]

  @@map("users")
}

model EntityImage {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityType          entity_image_type @map("entity_type")
  entityId            String            @map("entity_id") @db.Uuid
  blobUrl             String?           @map("blob_url")
  generatedAt         DateTime?         @map("generated_at") @db.Timestamptz(6)
  entityVersion       String            @map("entity_version")
  generationStatus    generation_status @default(generating) @map("generation_status")
  generationStartedAt DateTime          @default(now()) @map("generation_started_at") @db.Timestamptz(6)
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@unique([entityType, entityId])
  @@index([generationStatus, generationStartedAt], map: "idx_entity_images_status_started")
  @@map("entity_images")
}

enum armor_type {
  EMPTY_ENUM_VALUE @map("")
  medium
  heavy
}

enum collection_visibility {
  public
  private
}

enum family_visibility {
  public
  secret
  private
}

enum monster_visibility {
  public
  private
}

enum companion_visibility {
  public
  private
}

enum size_type {
  tiny
  small
  medium
  large
  huge
  gargantuan
}

enum item_visibility {
  public
  private
}

enum item_rarity {
  unspecified
  common
  uncommon
  rare
  very_rare
  legendary
}

enum entity_image_type {
  monster
  companion
  item
}

enum generation_status {
  generating
  completed
  failed
}

enum subclass_visibility {
  public
  private
}

enum spell_school_visibility {
  public
  private
}

enum ancestry_rarity {
  common
  exotic
}

enum monster_role {
  melee
  ranged
  controller
  support
  aoe
  summoner
  striker
  ambusher
  defender
  skirmisher
}

model Source {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  license      String
  link         String
  abbreviation String
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  monsters     Monster[]
  items        Item[]
  companions   Companion[]
  subclasses   Subclass[]
  spellSchools SpellSchool[]
  backgrounds  Background[]
  ancestries   Ancestry[]

  @@map("sources")
}

model Award {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  abbreviation     String
  description      String?
  slug             String             @unique
  url              String
  color            String
  icon             String
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  monsterAwards    MonsterAward[]
  itemAwards       ItemAward[]
  companionAwards  CompanionAward[]
  subclassAwards   SubclassAward[]
  schoolAwards     SpellSchoolAward[]
  backgroundAwards BackgroundAward[]
  ancestryAwards   AncestryAward[]

  @@map("awards")
}

model MonsterAward {
  monsterId String  @map("monster_id") @db.Uuid
  awardId   String  @map("award_id") @db.Uuid
  monster   Monster @relation(fields: [monsterId], references: [id], onDelete: Cascade)
  award     Award   @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([monsterId, awardId])
  @@map("monsters_awards")
}

model ItemAward {
  itemId  String @map("item_id") @db.Uuid
  awardId String @map("award_id") @db.Uuid
  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  award   Award  @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([itemId, awardId])
  @@map("items_awards")
}

model CompanionAward {
  companionId String    @map("companion_id") @db.Uuid
  awardId     String    @map("award_id") @db.Uuid
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  award       Award     @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([companionId, awardId])
  @@map("companions_awards")
}

model SubclassAward {
  subclassId String   @map("subclass_id") @db.Uuid
  awardId    String   @map("award_id") @db.Uuid
  subclass   Subclass @relation(fields: [subclassId], references: [id], onDelete: Cascade)
  award      Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([subclassId, awardId])
  @@map("subclasses_awards")
}

model SpellSchoolAward {
  schoolId String      @map("school_id") @db.Uuid
  awardId  String      @map("award_id") @db.Uuid
  school   SpellSchool @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  award    Award       @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([schoolId, awardId])
  @@map("spell_schools_awards")
}

model BackgroundAward {
  backgroundId String     @map("background_id") @db.Uuid
  awardId      String     @map("award_id") @db.Uuid
  background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  award        Award      @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([backgroundId, awardId])
  @@map("backgrounds_awards")
}

model AncestryAward {
  ancestryId String   @map("ancestry_id") @db.Uuid
  awardId    String   @map("award_id") @db.Uuid
  ancestry   Ancestry @relation(fields: [ancestryId], references: [id], onDelete: Cascade)
  award      Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@id([ancestryId, awardId])
  @@map("ancestries_awards")
}
