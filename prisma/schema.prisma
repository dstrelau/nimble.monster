generator client {
  provider        = "prisma-client-js"
  output          = "../lib/prisma"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id                 String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creatorId          String                @map("user_id") @db.Uuid
  name               String
  public             Boolean?              @default(false)
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?             @default(now()) @map("updated_at") @db.Timestamptz(6)
  description        String                @default("")
  visibility         collection_visibility @default(public)
  creator            User                  @relation(fields: [creatorId], references: [id], onUpdate: NoAction)
  monsterCollections MonsterInCollection[]
  itemCollections    ItemInCollection[]

  @@index([creatorId], map: "idx_collections_user_id")
  @@map("collections")
}

model MonsterInCollection {
  collectionId String     @map("collection_id") @db.Uuid
  monsterId    String     @map("monster_id") @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id])
  monster      Monster    @relation(fields: [monsterId], references: [id], onDelete: Cascade)

  @@id([monsterId, collectionId])
  @@map("monsters_collections")
}

model ItemInCollection {
  collectionId String     @map("collection_id") @db.Uuid
  itemId       String     @map("item_id") @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id])
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([itemId, collectionId])
  @@map("items_collections")
}

model Family {
  id          String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creatorId   String            @map("user_id") @db.Uuid
  visibility  family_visibility @default(public)
  name        String
  description String?
  abilities   Json[]
  createdAt   DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  featured    Boolean           @default(false)
  creator     User              @relation(fields: [creatorId], references: [id], onUpdate: NoAction)
  monsters    Monster[]

  @@map("families")
}

model Condition {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String
  official    Boolean  @default(false)
  creatorId   String   @map("creator_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  creator           User               @relation(fields: [creatorId], references: [id], onUpdate: NoAction)
  monsterConditions MonsterCondition[]

  @@map("conditions")
}

model MonsterCondition {
  monsterId   String    @map("monster_id") @db.Uuid
  conditionId String    @map("condition_id") @db.Uuid
  inline      Boolean
  monster     Monster   @relation(fields: [monsterId], references: [id], onDelete: Cascade)
  condition   Condition @relation(fields: [conditionId], references: [id])

  @@id([monsterId, conditionId])
  @@map("monsters_conditions")
}

model Monster {
  id                 String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String
  level              String
  levelInt           Int                   @default(0) @map("level_int")
  hp                 Int
  armor              armor_type
  size               size_type             @default(medium)
  speed              Int                   @default(0)
  fly                Int                   @default(0)
  swim               Int                   @default(0)
  actions            Json[]
  abilities          Json[]
  legendary          Boolean               @default(false)
  minion             Boolean               @default(false)
  bloodied           String                @default("")
  lastStand          String                @default("") @map("last_stand")
  saves              String[]
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  kind               String                @default("")
  visibility         monster_visibility    @default(public)
  family_id          String?               @db.Uuid
  actionPreface      String?               @map("action_preface")
  moreInfo           String?               @default("") @map("more_info")
  userId             String                @map("user_id") @db.Uuid
  burrow             Int                   @default(0)
  climb              Int                   @default(0)
  teleport           Int                   @default(0)
  family             Family?               @relation(fields: [family_id], references: [id])
  creator            User                  @relation(fields: [userId], references: [id], onUpdate: NoAction)
  monsterCollections MonsterInCollection[]
  monsterConditions  MonsterCondition[]

  @@index([userId], map: "idx_monsters_user_id")
  @@map("monsters")
}

model Companion {
  id            String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  kind          String               @default("")
  class         String               @default("")
  hp_per_level  String               @map("hp_per_level")
  wounds        Int                  @default(0)
  size          size_type            @default(medium)
  saves         String               @default("")
  actions       Json[]
  abilities     Json[]
  actionPreface String?              @map("action_preface")
  dyingRule     String               @default("") @map("dying_rule")
  moreInfo      String?              @default("") @map("more_info")
  visibility    companion_visibility @default(public)
  userId        String               @map("user_id") @db.Uuid
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator       User                 @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([userId], map: "idx_companions_user_id")
  @@map("companions")
}

model Session {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  discordId  String   @map("discord_id")
  expires_at DateTime @db.Timestamptz(6)
  userId     String   @map("user_id") @db.Uuid
  users      User     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([expires_at], map: "idx_sessions_expires_at")
  @@map("sessions")
}

model Item {
  id              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String
  kind            String             @default("")
  description     String             @default("")
  moreInfo        String?            @default("") @map("more_info")
  imageIcon       String?            @map("image_icon")
  imageBgIcon     String?            @map("image_bg_icon")
  imageColor      String?            @map("image_color")
  imageBgColor    String?            @map("image_bg_color")
  rarity          item_rarity        @default(unspecified)
  visibility      item_visibility    @default(public)
  userId          String             @map("user_id") @db.Uuid
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator         User               @relation(fields: [userId], references: [id], onUpdate: NoAction)
  itemCollections ItemInCollection[]

  @@index([userId], map: "idx_items_user_id")
  @@map("items")
}

model User {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  discordId    String       @unique(map: "idx_users_discord_id") @map("discord_id")
  username     String       @unique(map: "idx_users_username")
  displayName  String?      @map("display_name")
  avatar       String?
  imageUrl     String?      @map("image_url")
  refreshToken String?      @map("refresh_token")
  collections  Collection[]
  families     Family[]
  monsters     Monster[]
  companions   Companion[]
  items        Item[]
  sessions     Session[]
  conditions   Condition[]

  @@map("users")
}

model EntityImage {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityType          entity_image_type @map("entity_type")
  entityId            String            @map("entity_id") @db.Uuid
  blobUrl             String?           @map("blob_url")
  generatedAt         DateTime?         @map("generated_at") @db.Timestamptz(6)
  entityVersion       String            @map("entity_version")
  generationStatus    generation_status @default(generating) @map("generation_status")
  generationStartedAt DateTime          @default(now()) @map("generation_started_at") @db.Timestamptz(6)
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@unique([entityType, entityId])
  @@index([generationStatus, generationStartedAt], map: "idx_entity_images_status_started")
  @@map("entity_images")
}

enum armor_type {
  EMPTY_ENUM_VALUE @map("")
  medium
  heavy
}

enum collection_visibility {
  public
  private
}

enum family_visibility {
  public
  secret
  private
}

enum monster_visibility {
  public
  private
}

enum companion_visibility {
  public
  private
}

enum size_type {
  tiny
  small
  medium
  large
  huge
  gargantuan
}

enum item_visibility {
  public
  private
}

enum item_rarity {
  unspecified
  common
  uncommon
  rare
  very_rare
  legendary
}

enum entity_image_type {
  monster
  companion
  item
}

enum generation_status {
  generating
  completed
  failed
}
